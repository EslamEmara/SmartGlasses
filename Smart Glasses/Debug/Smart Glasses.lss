
Smart Glasses.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800078  00800078  0000038c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ade  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000691  00000000  00000000  00000f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cf  00000000  00000000  000015e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051c  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e0  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000246c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	ea c0       	rjmp	.+468    	; 0x1f0 <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	12 c1       	rjmp	.+548    	; 0x244 <__vector_15>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ee       	ldi	r30, 0xE0	; 224
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 37       	cpi	r26, 0x78	; 120
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e7       	ldi	r26, 0x78	; 120
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 37       	cpi	r26, 0x7C	; 124
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	40 c1       	rjmp	.+640    	; 0x2dc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:


#include "MCAL\UART\UART.h"

int main()
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
  66:	2b 97       	sbiw	r28, 0x0b	; 11
  68:	0f b6       	in	r0, 0x3f	; 63
  6a:	f8 94       	cli
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	0f be       	out	0x3f, r0	; 63
  70:	cd bf       	out	0x3d, r28	; 61
	uint8_t character = 0;
	ST_UARTConfig_t config = {FREQ_8MHz,BAUD_9600,EVEN_PARITY,DISABLE_RX_INT,DISABLE_TX_INT};
  72:	8b e0       	ldi	r24, 0x0B	; 11
  74:	e0 e6       	ldi	r30, 0x60	; 96
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	de 01       	movw	r26, r28
  7a:	11 96       	adiw	r26, 0x01	; 1
  7c:	01 90       	ld	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	8a 95       	dec	r24
  82:	e1 f7       	brne	.-8      	; 0x7c <main+0x1e>
	
	UART_Init(config);
  84:	e9 80       	ldd	r14, Y+1	; 0x01
  86:	fa 80       	ldd	r15, Y+2	; 0x02
  88:	0b 81       	ldd	r16, Y+3	; 0x03
  8a:	1c 81       	ldd	r17, Y+4	; 0x04
  8c:	2d 81       	ldd	r18, Y+5	; 0x05
  8e:	3e 81       	ldd	r19, Y+6	; 0x06
  90:	4f 81       	ldd	r20, Y+7	; 0x07
  92:	58 85       	ldd	r21, Y+8	; 0x08
  94:	69 85       	ldd	r22, Y+9	; 0x09
  96:	7a 85       	ldd	r23, Y+10	; 0x0a
  98:	8b 85       	ldd	r24, Y+11	; 0x0b
  9a:	06 d0       	rcall	.+12     	; 0xa8 <UART_Init>
	UART_SendString("Eslam Emara");
  9c:	8b e6       	ldi	r24, 0x6B	; 107
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	95 d0       	rcall	.+298    	; 0x1cc <UART_SendString>
	
	while(1)
	{
		character=UART_ReceiveByte();
  a2:	90 d0       	rcall	.+288    	; 0x1c4 <UART_ReceiveByte>
		UART_SendByte(character);
  a4:	88 d0       	rcall	.+272    	; 0x1b6 <UART_SendByte>
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <main+0x44>

000000a8 <UART_Init>:
*inputs: adrress of function to call every transmission complete
*return: none
*
*/
void UART_SetTXCompleteISR(void (*function)(void)){
	TX_ISR = function;
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	2b 97       	sbiw	r28, 0x0b	; 11
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
  c4:	e9 82       	std	Y+1, r14	; 0x01
  c6:	fa 82       	std	Y+2, r15	; 0x02
  c8:	0b 83       	std	Y+3, r16	; 0x03
  ca:	1c 83       	std	Y+4, r17	; 0x04
  cc:	2d 83       	std	Y+5, r18	; 0x05
  ce:	3e 83       	std	Y+6, r19	; 0x06
  d0:	4f 83       	std	Y+7, r20	; 0x07
  d2:	58 87       	std	Y+8, r21	; 0x08
  d4:	69 87       	std	Y+9, r22	; 0x09
  d6:	7a 87       	std	Y+10, r23	; 0x0a
  d8:	8b 87       	std	Y+11, r24	; 0x0b
  da:	69 81       	ldd	r22, Y+1	; 0x01
  dc:	7a 81       	ldd	r23, Y+2	; 0x02
  de:	8b 81       	ldd	r24, Y+3	; 0x03
  e0:	9c 81       	ldd	r25, Y+4	; 0x04
  e2:	0d 81       	ldd	r16, Y+5	; 0x05
  e4:	1e 81       	ldd	r17, Y+6	; 0x06
  e6:	2f 81       	ldd	r18, Y+7	; 0x07
  e8:	38 85       	ldd	r19, Y+8	; 0x08
  ea:	00 0f       	add	r16, r16
  ec:	11 1f       	adc	r17, r17
  ee:	22 1f       	adc	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	00 0f       	add	r16, r16
  f4:	11 1f       	adc	r17, r17
  f6:	22 1f       	adc	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	a9 01       	movw	r20, r18
  fc:	98 01       	movw	r18, r16
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	44 1f       	adc	r20, r20
 104:	55 1f       	adc	r21, r21
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	44 1f       	adc	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	c4 d0       	rcall	.+392    	; 0x298 <__udivmodsi4>
 110:	21 50       	subi	r18, 0x01	; 1
 112:	31 09       	sbc	r19, r1
 114:	8a b1       	in	r24, 0x0a	; 10
 116:	80 61       	ori	r24, 0x10	; 16
 118:	8a b9       	out	0x0a, r24	; 10
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	88 60       	ori	r24, 0x08	; 8
 11e:	8a b9       	out	0x0a, r24	; 10
 120:	29 b9       	out	0x09, r18	; 9
 122:	80 b5       	in	r24, 0x20	; 32
 124:	8f 77       	andi	r24, 0x7F	; 127
 126:	80 bd       	out	0x20, r24	; 32
 128:	30 bd       	out	0x20, r19	; 32
 12a:	80 b5       	in	r24, 0x20	; 32
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	80 bd       	out	0x20, r24	; 32
 130:	80 b5       	in	r24, 0x20	; 32
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	80 bd       	out	0x20, r24	; 32
 136:	89 85       	ldd	r24, Y+9	; 0x09
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	39 f4       	brne	.+14     	; 0x14a <UART_Init+0xa2>
 13c:	80 b5       	in	r24, 0x20	; 32
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	80 bd       	out	0x20, r24	; 32
 142:	80 b5       	in	r24, 0x20	; 32
 144:	8f 7e       	andi	r24, 0xEF	; 239
 146:	80 bd       	out	0x20, r24	; 32
 148:	11 c0       	rjmp	.+34     	; 0x16c <UART_Init+0xc4>
 14a:	81 11       	cpse	r24, r1
 14c:	07 c0       	rjmp	.+14     	; 0x15c <UART_Init+0xb4>
 14e:	80 b5       	in	r24, 0x20	; 32
 150:	80 62       	ori	r24, 0x20	; 32
 152:	80 bd       	out	0x20, r24	; 32
 154:	80 b5       	in	r24, 0x20	; 32
 156:	80 61       	ori	r24, 0x10	; 16
 158:	80 bd       	out	0x20, r24	; 32
 15a:	08 c0       	rjmp	.+16     	; 0x16c <UART_Init+0xc4>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	31 f4       	brne	.+12     	; 0x16c <UART_Init+0xc4>
 160:	80 b5       	in	r24, 0x20	; 32
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	80 bd       	out	0x20, r24	; 32
 166:	80 b5       	in	r24, 0x20	; 32
 168:	8f 7e       	andi	r24, 0xEF	; 239
 16a:	80 bd       	out	0x20, r24	; 32
 16c:	80 b5       	in	r24, 0x20	; 32
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	80 bd       	out	0x20, r24	; 32
 172:	80 b5       	in	r24, 0x20	; 32
 174:	84 60       	ori	r24, 0x04	; 4
 176:	80 bd       	out	0x20, r24	; 32
 178:	8a 85       	ldd	r24, Y+10	; 0x0a
 17a:	81 11       	cpse	r24, r1
 17c:	06 c0       	rjmp	.+12     	; 0x18a <UART_Init+0xe2>
 17e:	8f b7       	in	r24, 0x3f	; 63
 180:	80 68       	ori	r24, 0x80	; 128
 182:	8f bf       	out	0x3f, r24	; 63
 184:	8a b1       	in	r24, 0x0a	; 10
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8a b9       	out	0x0a, r24	; 10
 18a:	8b 85       	ldd	r24, Y+11	; 0x0b
 18c:	81 11       	cpse	r24, r1
 18e:	06 c0       	rjmp	.+12     	; 0x19c <UART_Init+0xf4>
 190:	8f b7       	in	r24, 0x3f	; 63
 192:	80 68       	ori	r24, 0x80	; 128
 194:	8f bf       	out	0x3f, r24	; 63
 196:	8a b1       	in	r24, 0x0a	; 10
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	8a b9       	out	0x0a, r24	; 10
 19c:	2b 96       	adiw	r28, 0x0b	; 11
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	cd bf       	out	0x3d, r28	; 61
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	ff 90       	pop	r15
 1b2:	ef 90       	pop	r14
 1b4:	08 95       	ret

000001b6 <UART_SendByte>:
 1b6:	5d 9b       	sbis	0x0b, 5	; 11
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <UART_SendByte>
 1ba:	8c b9       	out	0x0c, r24	; 12
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	80 64       	ori	r24, 0x40	; 64
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	08 95       	ret

000001c4 <UART_ReceiveByte>:
 1c4:	5f 9b       	sbis	0x0b, 7	; 11
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <UART_ReceiveByte>
 1c8:	8c b1       	in	r24, 0x0c	; 12
 1ca:	08 95       	ret

000001cc <UART_SendString>:
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	8c 01       	movw	r16, r24
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <UART_SendString+0x10>
 1d8:	ee df       	rcall	.-36     	; 0x1b6 <UART_SendByte>
 1da:	cf 5f       	subi	r28, 0xFF	; 255
 1dc:	f8 01       	movw	r30, r16
 1de:	ec 0f       	add	r30, r28
 1e0:	f1 1d       	adc	r31, r1
 1e2:	80 81       	ld	r24, Z
 1e4:	81 11       	cpse	r24, r1
 1e6:	f8 cf       	rjmp	.-16     	; 0x1d8 <UART_SendString+0xc>
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	08 95       	ret

000001f0 <__vector_13>:
}


/*ISRs*/
void __vector_13(){
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	2f 93       	push	r18
 1fc:	3f 93       	push	r19
 1fe:	4f 93       	push	r20
 200:	5f 93       	push	r21
 202:	6f 93       	push	r22
 204:	7f 93       	push	r23
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	af 93       	push	r26
 20c:	bf 93       	push	r27
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
	RX_ISR();
 212:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__data_end>
 216:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__data_end+0x1>
 21a:	09 95       	icall
	SETBIT(UCSRA,7);
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	8b b9       	out	0x0b, r24	; 11
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__vector_15>:

void __vector_15(){
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	TX_ISR();
 266:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <TX_ISR>
 26a:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <TX_ISR+0x1>
 26e:	09 95       	icall
	SETBIT(UCSRA,6);
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	80 64       	ori	r24, 0x40	; 64
 274:	8b b9       	out	0x0b, r24	; 11

}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__udivmodsi4>:
 298:	a1 e2       	ldi	r26, 0x21	; 33
 29a:	1a 2e       	mov	r1, r26
 29c:	aa 1b       	sub	r26, r26
 29e:	bb 1b       	sub	r27, r27
 2a0:	fd 01       	movw	r30, r26
 2a2:	0d c0       	rjmp	.+26     	; 0x2be <__udivmodsi4_ep>

000002a4 <__udivmodsi4_loop>:
 2a4:	aa 1f       	adc	r26, r26
 2a6:	bb 1f       	adc	r27, r27
 2a8:	ee 1f       	adc	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	a2 17       	cp	r26, r18
 2ae:	b3 07       	cpc	r27, r19
 2b0:	e4 07       	cpc	r30, r20
 2b2:	f5 07       	cpc	r31, r21
 2b4:	20 f0       	brcs	.+8      	; 0x2be <__udivmodsi4_ep>
 2b6:	a2 1b       	sub	r26, r18
 2b8:	b3 0b       	sbc	r27, r19
 2ba:	e4 0b       	sbc	r30, r20
 2bc:	f5 0b       	sbc	r31, r21

000002be <__udivmodsi4_ep>:
 2be:	66 1f       	adc	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	88 1f       	adc	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	1a 94       	dec	r1
 2c8:	69 f7       	brne	.-38     	; 0x2a4 <__udivmodsi4_loop>
 2ca:	60 95       	com	r22
 2cc:	70 95       	com	r23
 2ce:	80 95       	com	r24
 2d0:	90 95       	com	r25
 2d2:	9b 01       	movw	r18, r22
 2d4:	ac 01       	movw	r20, r24
 2d6:	bd 01       	movw	r22, r26
 2d8:	cf 01       	movw	r24, r30
 2da:	08 95       	ret

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
